Django Transaction Locks:

1. We use `select_for_update` on our queryset to tell the database to lock the object until the transaction is done.
2. Locking a database in a row requires a database transaction. We use django decorator `transaction.atomic()` to
   scope the transaction.

An Example,

        @classmethod
        def withdraw(cls, id, amount):
          with transaction.atomic():
              account = (
                  cls.objects
                  .select_for_update()
                  .get(id=id)
              )

              if account.balance < amount:
                  raise errors.InsufficentFunds()
              account.balance -= amount
              account.save()
          return account

        @classmethod
        def deposit(cls, id, amount):
          with transaction.atomic():
            account = (
                  cls.objects
                  .select_for_update()
                  .get(id=id)
              )
          account.balance += amount
        account.save() 
        return account

